{"version":3,"sources":["serviceWorker.js","listItems.js","Chart.js","Deposits.js","Orders.js","Dashboard.js","myCanvas.js","index.js"],"names":["Boolean","window","location","hostname","match","ListItem","ListItemIcon","ListItemText","ListSubheader","createData","time","amount","undefined","makeStyles","depositContext","flex","id","date","name","shipTo","paymentMethod","theme","seeMore","marginTop","spacing","root","display","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","breakpoints","up","appBarSpacer","content","height","overflow","container","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","MyCanvas","state","color","brushRadius","lazyRadius","img","pic","Image","show","headerHeight","handleChangeComplete","c","event","setState","hex","resize","console","log","header","current","clientHeight","onImageChange","target","files","reader","FileReader","test","canvas","saveableCanvas","temp","onload","e","result","Promise","resolve","reject","src","Error","then","clear","drawImage","err","readAsDataURL","React","createRef","h","document","getElementsByClassName","this","classes","props","className","CssBaseline","AppBar","ref","Toolbar","Typography","variant","noWrap","Drawer","drawerContainer","List","button","key","onClick","primary","undo","type","value","onChange","parseInt","onChangeComplete","Container","maxWidth","style","canvasDraw","brushColor","canvasWidth","canvasHeight","imgSrc","loadableCanvas","loadSaveData","localStorage","getItem","disabled","hideGrid","saveData","Component","withStyles","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4c378823.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport PeopleIcon from '@material-ui/icons/People';\nimport BarChartIcon from '@material-ui/icons/BarChart';\nimport LayersIcon from '@material-ui/icons/Layers';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\n\nexport const mainListItems = (\n  <div>\n    <ListItem button>\n      <ListItemIcon>\n        <DashboardIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Dashboard\" />\n    </ListItem>\n    <ListItem button>\n      <ListItemIcon>\n        <ShoppingCartIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Orders\" />\n    </ListItem>\n    <ListItem button>\n      <ListItemIcon>\n        <PeopleIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Customers\" />\n    </ListItem>\n    <ListItem button>\n      <ListItemIcon>\n        <BarChartIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Reports\" />\n    </ListItem>\n    <ListItem button>\n      <ListItemIcon>\n        <LayersIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Integrations\" />\n    </ListItem>\n  </div>\n);\n\nexport const secondaryListItems = (\n  <div>\n    <ListSubheader inset>Saved reports</ListSubheader>\n    <ListItem button>\n      <ListItemIcon>\n        <AssignmentIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Current month\" />\n    </ListItem>\n    <ListItem button>\n      <ListItemIcon>\n        <AssignmentIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Last quarter\" />\n    </ListItem>\n    <ListItem button>\n      <ListItemIcon>\n        <AssignmentIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Year-end sale\" />\n    </ListItem>\n  </div>\n);\n","import React from 'react';\nimport { useTheme } from '@material-ui/core/styles';\nimport { LineChart, Line, XAxis, YAxis, Label, ResponsiveContainer } from 'recharts';\nimport Title from './Title';\n\n// Generate Sales Data\nfunction createData(time, amount) {\n  return { time, amount };\n}\n\nconst data = [\n  createData('00:00', 0),\n  createData('03:00', 300),\n  createData('06:00', 600),\n  createData('09:00', 800),\n  createData('12:00', 1500),\n  createData('15:00', 2000),\n  createData('18:00', 2400),\n  createData('21:00', 2400),\n  createData('24:00', undefined),\n];\n\nexport default function Chart() {\n  const theme = useTheme();\n\n  return (\n    <React.Fragment>\n      <Title>Today</Title>\n      <ResponsiveContainer>\n        <LineChart\n          data={data}\n          margin={{\n            top: 16,\n            right: 16,\n            bottom: 0,\n            left: 24,\n          }}\n        >\n          <XAxis dataKey=\"time\" stroke={theme.palette.text.secondary} />\n          <YAxis stroke={theme.palette.text.secondary}>\n            <Label\n              angle={270}\n              position=\"left\"\n              style={{ textAnchor: 'middle', fill: theme.palette.text.primary }}\n            >\n              Sales ($)\n            </Label>\n          </YAxis>\n          <Line type=\"monotone\" dataKey=\"amount\" stroke={theme.palette.primary.main} dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Title from './Title';\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\nconst useStyles = makeStyles({\n  depositContext: {\n    flex: 1,\n  },\n});\n\nexport default function Deposits() {\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <Title>Recent Deposits</Title>\n      <Typography component=\"p\" variant=\"h4\">\n        $3,024.00\n      </Typography>\n      <Typography color=\"textSecondary\" className={classes.depositContext}>\n        on 15 March, 2019\n      </Typography>\n      <div>\n        <Link color=\"primary\" href=\"#\" onClick={preventDefault}>\n          View balance\n        </Link>\n      </div>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from './Title';\n\n// Generate Order Data\nfunction createData(id, date, name, shipTo, paymentMethod, amount) {\n  return { id, date, name, shipTo, paymentMethod, amount };\n}\n\nconst rows = [\n  createData(0, '16 Mar, 2019', 'Elvis Presley', 'Tupelo, MS', 'VISA ⠀•••• 3719', 312.44),\n  createData(1, '16 Mar, 2019', 'Paul McCartney', 'London, UK', 'VISA ⠀•••• 2574', 866.99),\n  createData(2, '16 Mar, 2019', 'Tom Scholz', 'Boston, MA', 'MC ⠀•••• 1253', 100.81),\n  createData(3, '16 Mar, 2019', 'Michael Jackson', 'Gary, IN', 'AMEX ⠀•••• 2000', 654.39),\n  createData(4, '15 Mar, 2019', 'Bruce Springsteen', 'Long Branch, NJ', 'VISA ⠀•••• 5919', 212.79),\n];\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\nconst useStyles = makeStyles((theme) => ({\n  seeMore: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nexport default function Orders() {\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <Title>Recent Orders</Title>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Date</TableCell>\n            <TableCell>Name</TableCell>\n            <TableCell>Ship To</TableCell>\n            <TableCell>Payment Method</TableCell>\n            <TableCell align=\"right\">Sale Amount</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow key={row.id}>\n              <TableCell>{row.date}</TableCell>\n              <TableCell>{row.name}</TableCell>\n              <TableCell>{row.shipTo}</TableCell>\n              <TableCell>{row.paymentMethod}</TableCell>\n              <TableCell align=\"right\">{row.amount}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      <div className={classes.seeMore}>\n        <Link color=\"primary\" href=\"#\" onClick={preventDefault}>\n          See more orders\n        </Link>\n      </div>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Link from '@material-ui/core/Link';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport { mainListItems, secondaryListItems } from './listItems';\nimport Chart from './Chart';\nimport Deposits from './Deposits';\nimport Orders from './Orders';\nimport CanvasDraw from \"react-canvas-draw\";\n\n\n//Canvas Variables and Functions\n\nlet canvasSettings = {\n\t color: \"#ffc600\",\n    width: 800,\n    height: 400,\n    brushRadius: 3,\n    lazyRadius: 12\n};\n\n\n\n\n//Bottom Copyright \nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Sarah's App\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\n//Width of side menu bar\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: 'none',\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: 'relative',\n    whiteSpace: 'nowrap',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto',\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 240,\n  },\n}));\n\nexport default function Dashboard() {\n// Functions for CanvasDraw\nfunction setWidth(value) {\n    \n    canvasSettings.width = value;\n\tconsole.log(\"We're Here!\");\n  }\n \n\n\n\n const classes = useStyles();\n  \n  //Handle side menu open and close\n  const [open, setOpen] = React.useState(true);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n \n const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n            Dashboard\n          </Typography>\n          <IconButton color=\"inherit\">\n            <Badge color=\"secondary\">\n              <NotificationsIcon />\n            </Badge>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        classes={{\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>{mainListItems}</List>\n        <Divider />\n        <List>{secondaryListItems}</List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n     \n\t\t  <CanvasDraw\n\t\t  brushColor={canvasSettings.color}\n          brushRadius={canvasSettings.brushRadius}\n          lazyRadius={canvasSettings.lazyRadius}\n          canvasWidth={canvasSettings.width}\n          canvasHeight={canvasSettings.height}  \n\t\t  >\n\t\t  console.log(canvasWidth)\n\t\t  </CanvasDraw>\t\n\t \n\t <div>\n            <label>Width:</label>\n            <input\n              type=\"number\"\n              defaultValue={canvasSettings.width}\n              onChange={e =>{setWidth( parseInt(e.target.value, 10))}}\n            />\n          </div>\n\t \n          <Box pt={4}>\n            <Copyright />\n          </Box>\n        </Container>\n      </main>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport ReactDOM from \"react-dom\"\r\n\r\nimport CanvasDraw from \"react-canvas-draw\";\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport UndoIcon from '@material-ui/icons/Undo';\r\nimport BrushIcon from '@material-ui/icons/Brush';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\n\r\n\r\nimport { SketchPicker } from 'react-color';\r\n\r\n\r\nconst drawerWidth = 240;\r\n//const reader = new FileReader();\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 24, // keep right padding when drawer closed\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n});\r\n\r\nclass MyCanvas extends Component {\r\n\r\n    state = {\r\n        color: \"#000000\",\r\n        width: 400,\r\n        height: 400,\r\n        brushRadius: 3,\r\n        lazyRadius: 0,\r\n        img: \"\",\r\n        pic: new Image(),\r\n        show: false,\r\n        headerHeight: 0\r\n    };\r\n\r\n\r\n    handleChangeComplete = (c, event) => {\r\n        this.setState({ color: c.hex });\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        const h = document.getElementsByClassName('MyCanvas-appBar-4').clientHeight;\r\n        console.log(h);\r\n        this.setState({ headerHeight: h });\r\n    }\r\n\r\n    resize = (event) => {\r\n\r\n        console.log(this.header.current.clientHeight);\r\n\r\n        if (this.state.width > this.state.height) {\r\n\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    onImageChange = (event) => {\r\n        if (event.target.files && event.target.files[0]) {\r\n            let reader = new FileReader();\r\n            let test = new Image()\r\n            let canvas = this.saveableCanvas;\r\n            let temp = this;\r\n\r\n\r\n\r\n            reader.onload = (e) => {\r\n                this.setState({ img: e.target.result });\r\n\r\n                //Promise to setup the new image Test\r\n                var promise = new Promise(function (resolve, reject) {\r\n                    test.src = e.target.result;\r\n                    console.log(test.width);\r\n                    if (test.src != null) {\r\n                        resolve(\"Stuff worked!\");\r\n                    }\r\n                    else {\r\n                        reject(Error(\"It broke\"));\r\n                    }\r\n                });\r\n\r\n\r\n                promise.then(function (result) {\r\n                    console.log(result); // \"Stuff worked!\"\r\n                    //  console.log(test.width);\r\n                    temp.setState({ width: test.width });\r\n                    temp.setState({ height: test.height });\r\n                    canvas.clear();\r\n                    canvas.drawImage();\r\n                }, function (err) {\r\n                    console.log(err); // Error: \"It broke\"\r\n                });\r\n\r\n                //Then set the width and height and draw the canvas\r\n\r\n\r\n            };\r\n            reader.readAsDataURL(event.target.files[0]);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    header = React.createRef();\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        console.log(classes.appBar);\r\n\r\n        var style = {};\r\n        if (!this.state.show) {\r\n            style.display = 'none'\r\n        }\r\n\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <CssBaseline />\r\n                <AppBar position=\"fixed\" className={classes.appBar} ref={this.header}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" noWrap>\r\n                            Clipped drawer\r\n          </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Drawer\r\n                    className={classes.drawer}\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: classes.drawerPaper,\r\n                    }}\r\n                >\r\n                    <Toolbar />\r\n                    <div className={classes.drawerContainer}>\r\n                        <List>\r\n                            <ListItem button key='clear'\r\n                                onClick={() => {\r\n                                    this.saveableCanvas.clear()\r\n                                }}>\r\n                                <ListItemIcon> <ClearIcon /> </ListItemIcon>\r\n                                <ListItemText primary='Clear' />\r\n                            </ListItem>\r\n\r\n\r\n                            <ListItem button key='undo'\r\n                                onClick={() => {\r\n                                    this.saveableCanvas.undo();\r\n                                }}>\r\n                                <ListItemIcon> <UndoIcon /> </ListItemIcon>\r\n                                <ListItemText primary='Undo' />\r\n                            </ListItem>\r\n\r\n                            <ListItem key='brushRadius' >\r\n                                <ListItemIcon> <BrushIcon /> </ListItemIcon>\r\n                                <ListItemText primary='Brush Radius:' />\r\n                            </ListItem>\r\n                            <ListItem>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    value={this.state.brushRadius}\r\n                                    onChange={e =>\r\n                                        this.setState({ brushRadius: parseInt(e.target.value, 10) })\r\n                                    }\r\n                                />\r\n                            </ListItem>\r\n\r\n                            <ListItem key='color'>\r\n                                <ListItemText primary='Color' />\r\n                            </ListItem>\r\n                            <ListItem key='ColorPicker'>\r\n                                <SketchPicker\r\n                                    color={this.state.color}\r\n                                    onChangeComplete={this.handleChangeComplete} />\r\n                            </ListItem>\r\n\r\n\r\n                            <ListItem key='upload'>\r\n                                <ListItemText primary='Upload' />\r\n                                <input type=\"file\" onChange={this.onImageChange} className=\"filetype\" id=\"group_image\" />\r\n                            </ListItem>\r\n\r\n                            <ListItem button key='resize'\r\n                                onClick={() => {\r\n                                    this.resize()\r\n                                }} >\r\n                                <ListItemIcon> <UndoIcon /> </ListItemIcon>\r\n                                <ListItemText primary='Fit to Screen' />\r\n                            </ListItem>\r\n\r\n                        </List>\r\n                    </div>\r\n                </Drawer>\r\n\r\n                <Container maxWidth=\"lg\" className={classes.container}>\r\n\r\n\r\n\r\n                    <p>Try it out! Draw something, hit \"Save\" and then \"Load\".</p>\r\n\r\n\r\n\r\n                    <CanvasDraw style={{ zIndex: 2 }}\r\n                        ref={canvasDraw => (this.saveableCanvas = canvasDraw)}\r\n                        brushColor={this.state.color}\r\n                        brushRadius={this.state.brushRadius}\r\n                        lazyRadius={this.state.lazyRadius}\r\n                        canvasWidth={this.state.width}\r\n                        canvasHeight={this.state.height}\r\n                        imgSrc={this.state.img}\r\n                    />\r\n                    <p>\r\n                        The following is a disabled canvas with a hidden grid that we use to\r\n                        load & show your saved drawing.\r\n        </p>\r\n                    <button\r\n                        onClick={() => {\r\n                            this.loadableCanvas.loadSaveData(\r\n                                localStorage.getItem(\"savedDrawing\")\r\n                            );\r\n                        }}\r\n                    >\r\n                        Load what you saved previously into the following canvas. Either by\r\n                        calling `loadSaveData()` on the component's reference or passing it\r\n                        the `saveData` prop:\r\n        </button>\r\n                    <CanvasDraw\r\n                        disabled\r\n                        hideGrid\r\n                        ref={canvasDraw => (this.loadableCanvas = canvasDraw)}\r\n                        saveData={localStorage.getItem(\"savedDrawing\")}\r\n                    />\r\n                </Container>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\nexport default withStyles(useStyles)(MyCanvas);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport CanvasDraw from \"react-canvas-draw\";\nimport Dashboard from \"./Dashboard.js\"\nimport MyCanvas from \"./myCanvas.js\";\n\nReactDOM.render(<MyCanvas />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}